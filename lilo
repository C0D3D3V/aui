#!/bin/bash

 
AUI_DIR=`pwd` #CURRENT DIRECTORY 
LOG="${AUI_DIR}/`basename ${0}`.log" # LOG FILE

[[ -f $LOG ]] && rm -f "$LOG"

cecho() { 
 echo -e "$1"
 echo -e "$1" >>"$LOG"
 tput sgr0;
} 

error_msg() {
    local _msg="${1}"
    echo -e "${_msg}"
    echo -e "${_msg}" >>"$LOG"
    exit 1
} 

check_root() {
 if [[ "$(id -u)" != "0" ]]; then
  error_msg "ERROR! You must execute the script as the root user."
 fi
} 


print_line() {
 printf "\n%$(tput cols)s\n\n"|tr ' ' '-'
}
 
 aui_download_packages() {
    for PKG in $1; do
      #exec command as user instead of root
      su - c0d3d3v -c "
        [[ ! -d aui_packages ]] && mkdir aui_packages
        cd aui_packages
        curl -o ${PKG}.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/${PKG}.tar.gz
        tar zxvf ${PKG}.tar.gz
        rm ${PKG}.tar.gz
        cd ${PKG}
        makepkg -csi --noconfirm
      "
    done
} 

is_package_installed() { 
    #check if a package is already installed
    for PKG in $1; do
      pacman -Q $PKG &> /dev/null && return 0;
    done
    return 1
}

run_as_user() {
    sudo -H -u c0d3d3v ${1}

}

read_input_text() {
#    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
#      OPTION=$2
#    else
      read -p "$1 [y/N]: " OPTION
      echo ""
#    fi
    OPTION=`echo "$OPTION" | tr '[:upper:]' '[:lower:]'`
} 

replace_line(){
    local _search=${1}
    local _replace=${2}
    local _filepath=${3}
    local _filebase=`basename ${3}`

    sed -e "s/${_search}/${_replace}/" ${_filepath} > /tmp/${_filebase} 2>"$LOG"
    if [[ ${?} -eq 0 ]]; then
      mv /tmp/${_filebase} ${_filepath}
    else
      cecho "failed: ${_search} - ${_filepath}"
    fi
}

add_line() {
    local _add_line=${1}
    local _filepath=${2}

    local _has_line=`grep -ci "${_add_line}" ${_filepath} 2>&1`
    [[ $_has_line -eq 0 ]] && echo "${_add_line}" >> ${_filepath}
} 


aur_package_install() {
    su - c0d3d3v -c "sudo -v"
    #install package from aur
    for PKG in $1; do
      if ! is_package_installed "${PKG}" ; then
          su - c0d3d3v -c "yaourt --noconfirm -S ${PKG}"
      else 
          echo -e "Warning: ${PKG} is up to date --skipping" 
      fi
    done
}  

package_install() { 
 #install packages using pacman
  	for PKG in $1; do
      if ! is_package_installed "${PKG}" ; then
		pacman -S --noconfirm --needed ${PKG}
      else 
		echo -e "Warning: ${PKG} is up to date --skipping" 
      fi
    done  
} 

config_xinitrc() { 
    #create a xinitrc file in home user directory
    cp -fv /etc/X11/xinit/xinitrc /home/c0d3d3v/.xinitrc
    echo -e "exec $1" >> /home/c0d3d3v/.xinitrc
    chown -R c0d3d3v:users /home/c0d3d3v/.xinitrc
} 

add_user_to_group() { 
    local _user=${1}
    local _group=${2}

    if [[ -z ${_group} ]]; then
      error_msg "ERROR! 'add_user_to_group' was not given enough parameters."
    fi
	
	groupadd ${_group}
    gpasswd -a ${_user} ${_group}  
} 

check_root

print_line

print_line

cecho "Connect to wifi [https://wiki.archlinux.org/index.php/netctl]"
cecho "Be sure to connect to Wifi with: wifi-menu"

cecho "Or Connect to ethernet [https://bbs.archlinux.org/viewtopic.php?id=210679]"
cecho "Be sure to connect to Ethernet with: "
cecho "ip link set enpxxxx up  "
cecho "dhcpcd" 

print_line

cecho "This Skript will install my lolvy system"
cecho "Be sure that you want to install all the software"

print_line

cecho "A clean Arch installation is requested" 

print_line

read -p "Press enter to continue"

print_line

 

cecho "Create a new user"  
useradd -m -g users -G wheel -s /bin/bash c0d3d3v
chfn c0d3d3v

################# User Action ##################
#user data

passwd c0d3d3v
################# User Action ##################
#password eingabe


print_line

read -p "Press enter to continue"

print_line

cecho "Load Bash Config"  
#bash conf resource (bsp: https://github.com/helmuthdu/dotfiles)
cp /etc/skel/.bashrc /home/c0d3d3v 
chown -R c0d3d3v:users /home/c0d3d3v    #config files gehÃ¶ren dem user

cecho "Make him sudoer"
package_install "sudo"

cecho "Backup /etc/sudoers to /etc/sudoers.aui"

cp -v /etc/sudoers /etc/sudoers.aui
sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers

cecho "Config sudo"
echo "" >> /etc/sudoers
echo 'Defaults !requiretty, !tty_tickets, !umask' >> /etc/sudoers
echo 'Defaults visiblepw, path_info' >> /etc/sudoers #insults
#loglinelen=0, logfile =/var/log/sudo.log, log_year, log_host, 
echo 'Defaults syslog=auth' >> /etc/sudoers
echo 'Defaults passwd_tries=3, passwd_timeout=1' >> /etc/sudoers
echo 'Defaults env_reset' >> /etc/sudoers
echo 'Defaults !env_editor, editor="/usr/bin/vim:/usr/bin/vi:/usr/bin/nano"' >> /etc/sudoers
echo 'Defaults timestamp_timeout=15' >> /etc/sudoers
echo 'Defaults passprompt="[sudo] password for %u: "' >> /etc/sudoers
echo 'Defaults lecture=never' >> /etc/sudores



print_line

read -p "Press enter to continue"

print_line


cecho "Istall yaourt" 
package_install "base-devel yajl namcap"

aui_download_packages "package-query yaourt"

print_line

read -p "Press enter to continue"

print_line


cecho "Install Bash tools" 
package_install "bc rsync mlocate bash-completion pkgstats arch-wiki-lite"


print_line

cecho "Install compress tools" 
package_install "zip unzip unrar p7zip lzop cpio"


print_line


cecho "Install AVAHI - https://wiki.archlinux.org/index.php/Avahi" 
package_install "avahi nss-mdns"
systemctl enable avahi-daemon

print_line


cecho "Install ALSA - https://wiki.archlinux.org/index.php/Alsa" 
package_install "alsa-utils alsa-plugins"


print_line



cecho "Install NTP - https://wiki.archlinux.de/title/NTP" 
package_install "ntp"
systemctl enable ntpd 

print_line



cecho "Install acpid - https://wiki.archlinux.org/index.php/acpid" 
package_install "acpid" 
	systemctl enable acpid 

print_line



cecho "Install dbus - https://wiki.archlinux.org/index.php/D-Bus" 
package_install "dbus" 

print_line


cecho "Install ssh - https://wiki.archlinux.de/title/SSH" 
package_install "openssh" 

print_line

cecho "Install cronie - https://wiki.archlinux.org/index.php/Cron" 
package_install "cronie" 
systemctl enable cronie

print_line


cecho "Install PULSEAUDIO - https://wiki.archlinux.org/index.php/Pulseaudio" 
package_install "pulseaudio pulseaudio-alsa"

print_line


cecho "Install NTFS/FAT/exFAT/F2FS - https://wiki.archlinux.org/index.php/File_Systems" 
package_install "ntfs-3g dosfstools exfat-utils f2fs-tools fuse fuse-exfat autofs mtpfs"


print_line

read -p "Press enter to continue"

print_line

cecho "Install ZSH - https://wiki.archlinux.org/index.php/Zsh" 
package_install "zsh wget git"
 
run_as_user "mv /home/c0d3d3v/.zshrc /home/c0d3d3v/.zshrc.bkp"
run_as_user "wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O /var/tmp/install-oh-my-zsh.sh"


print_line

read -p "Press enter to continue - Please exit zsh after finsh install with: exit"

print_line

run_as_user "sh /var/tmp/install-oh-my-zsh.sh"
run_as_user "rm /var/tmp/install-oh-my-zsh.sh"


print_line

read -p "Please check .zshrc - Press enter to continue"

print_line

run_as_user "nano /home/c0d3d3v/.zshrc"



read -p "Press enter to continue"

print_line

cecho "Install XORG - https://wiki.archlinux.org/index.php/Xorg" 
 
package_install "xorg-server xorg-xinit xorg-apps xorg-server-xwayland  xorg-xkill xorg-xinput xf86-input-libinput"

package_install "mesa"
modprobe uinput
 

print_line

cecho "Install FONTS CONFIGURATION - https://wiki.archlinux.org/index.php/Font_Configuration" 

package_install "cairo fontconfig freetype2"


print_line

read -p "Press enter to continue"

print_line

read_input_text "Install TLP"
if [[ $OPTION == y ]]; then
	cecho "Install TLP - https://wiki.archlinux.org/index.php/Tlp" 

	package_install "tlp "

	read_input_text "Install Lenovo TLP tools"
	if [[ $OPTION == y ]]; then
		package_install "tp_smapi acpi_call"
	fi

	systemctl enable tlp
	systemctl enable tlp-sleep
	systemctl disable systemd-rfkill
	tlp start
fi

print_line

cecho "Install VIDEO CARD Driver" 
VIDEO_DRIVER=""
ARCHI=`uname -m` # ARCHITECTURE
check_vga() {
    local _vga=`lspci | grep VGA | tr "[:upper:]" "[:lower:]"`
	local _vga_length=`lspci | grep VGA | wc -l`
	if [[ -n $(echo ${_vga} | grep "nvidia") || -f /sys/kernel/debug/dri/0/vbios.rom ]]; then
		cecho Nvidia 
		VIDEO_DRIVER="nvidia"
    elif [[ -n $(echo ${_vga} | grep "advanced micro devices") || -f /sys/kernel/debug/dri/0/radeon_pm_info || -f /sys/kernel/debug/dri/0/radeon_sa_info ]]; then
      cecho AMD/ATI
      VIDEO_DRIVER="ati"
    elif [[ -n $(echo ${_vga} | grep "intel corporation") || -f /sys/kernel/debug/dri/0/i915_capabilities ]]; then
      cecho Intel
	  VIDEO_DRIVER="intel"
	fi
}
check_vga
if [[ ${VIDEO_DRIVER} == nvidia ]]; then
	package_install "nvidia{,-utils}"
	[[ ${ARCHI} == x86_64 ]] && package_install "lib32-nvidia-utils"
	nvidia-xconfig --add-argb-glx-visuals --allow-glx-with-composite --composite --render-accel -o /etc/X11/xorg.conf.d/20-nvidia.conf;
elif [[ ${VIDEO_DRIVER} == ati ]]; then
	package_install "xf86-video-ati mesa-libgl mesa-vdpau libvdpau-va-gl"

elif [[ ${VIDEO_DRIVER} == intel ]]; then
    package_install "xf86-video-intel mesa-libgl libvdpau-va-gl"
fi

if [[ ${ARCHI} == x86_64 ]]; then
	is_package_installed "mesa-libgl" && package_install "lib32-mesa-libgl"
	is_package_installed "mesa-vdpau" && package_install "lib32-mesa-vdpau"
fi
if is_package_installed "libvdpau-va-gl"; then
	add_line "export VDPAU_DRIVER=va_gl" "/etc/profile"
fi

print_line

cecho "Install Aditional Firmeware" 
 
#critical... only if nessesery
#aur_package_install "aic94xx-firmware b43-firmware b43-firmware-legacy bfa-firmware broadcom-wl android-udev"
#package_install "alsa-firmware bluez-firmware ipw2100-fw ipw2200-fw libffado libmtp libraw1394"


print_line

cecho "Install CUPS - https://wiki.archlinux.org/index.php/Cups" 
package_install "cups cups-filters ghostscript gsfonts"
package_install "gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters foomatic-db-ppds foomatic-db-nonfree-ppds hplip splix cups-pdf foomatic-db-gutenprint-ppds"
systemctl enable org.cups.cupsd.service




print_line

cecho "Install synaptics - https://wiki.archlinux.de/title/Synaptics_Touchpad_Treiber" 
package_install "xf86-input-synaptics"


print_line

cecho "Install Fonts - https://wiki.archlinux.org/index.php/fonts" 
package_install "ttf-dejavu ttf-liberation ttf-bitstream-vera ttf-hack wqy-microhei noto-fonts-cjk"
aur_package_install "ttf-fira-code ttf-google-fonts-git " 



print_line

cecho "Install KDE - https://wiki.archlinux.org/index.php/KDE" 

package_install "plasma kf5 sddm"
package_install "ark dolphin dolphin-plugins kio-extras kdeconnect quota-tools gwenview kipi-plugins kcalc konsole spectacle okular kdeutils-sweeper kwalletmanager kmix"

#dont want
#kate

#dark design
package_install "arc-kde"
aur_package_install "papirus-icon-theme"

# config xinitrc
config_xinitrc "startkde"

print_line
cecho "Install KDE Tools"  

is_package_installed "cups" && package_install "print-manager"



#twitter
package_install "choqok"
#photos
package_install "digikam"
#cd burn
package_install "k3b cdrdao dvd+rw-tools"
#finanze
package_install "skrooge"
#terminal
package_install "yakuake" 

systemctl enable sddm
sddm --example-config > /etc/sddm.conf
sed -i 's/Current=/Current=breeze/' /etc/sddm.conf
sed -i 's/CursorTheme=/CursorTheme=breeze_cursors/' /etc/sddm.conf
sed -i 's/Numlock=none/Numlock=on/' /etc/sddm.conf



cecho "Install MTP Suptort"
if is_package_installed "libmtp" ; then
      package_install "gvfs-mtp"
fi


print_line

cecho "Install Networkmanager - https://wiki.archlinux.org/index.php/Networkmanager"  

package_install "networkmanager dnsmasq plasma-nm networkmanager-qt"

      # vpn support
package_install "networkmanager-openconnect networkmanager-openvpn networkmanager-pptp networkmanager-vpnc"
# auto update datetime from network
if is_package_installed "ntp"; then
	package_install "networkmanager-dispatcher-ntpd"
	systemctl enable NetworkManager-dispatcher.service
fi

is_package_installed "tlp" && package_install "tlp-rdw"

systemctl enable NetworkManager.service





read -p "Press enter to continue"

print_line

cecho "Install accessories APPS"  
 
cecho "Install conky-lua - Sensore Gadgets"  
aur_package_install "conky-lua"
package_install "lm_sensors"
sensors-detect --auto
 
cecho "Install conky-lua - Pacman GUI"  
aur_package_install "pamac-aur"

#enpass-bin passwort manager

cecho "Install terminator - Terminal multiplexer"   
package_install "terminator"

#unified-remote-server Remote tools




print_line

cecho "Install DEVELOPMENT APPS" 
cecho "Install emacs - Best Editor"  
package_install "emacs" 

cecho "Install sublime3 - Nice Editor"  
aur_package_install "sublime-text-dev" 
#aur_package_install "sublime-text" 

cecho "Install Android Studio"  
package_install "sublime-text-dev" 
aur_package_install "android-sdk android-sdk-platform-tools android-sdk-build-tools android-platform"
add_user_to_group c0d3d3v sdkusers
chown -R :sdkusers /opt/android-sdk/
chmod -R g+w /opt/android-sdk/
add_line "export ANDROID_HOME=/opt/android-sdk" "/home/c0d3d3v/.bashrc"
aur_package_install "android-studio"


cecho "Install monodevelop - dot net shit"  
package_install "monodevelop monodevelop-debugger-gdb"

cecho "Install qtcreator"  
package_install "qtcreator"

cecho "Install MySQL Workbench"  
package_install "mysql-workbench"


cecho "Install OpenJDK"  
package_install "jdk8-openjdk icedtea-web"
archlinux-java set java-8-openjdk/jre

cecho "Install nodejs"  
package_install "nodejs"
 
cecho "Install eclipse"  
package_install "eclipse-jee"


cecho "Install intellij - just more shit"  
package_install "intellij-idea-community-edition"





print_line

cecho "Install office APPS" 

#bÃ¼cher
cecho "Install calibre"  
package_install "calibre"
 
#git docu
cecho "Install haroopad"  
aur_package_install "haroopad"
 
#finanze
cecho "Install haroopad - finanze manager"  
package_install "homebank"


#latex
cecho "Install latex + texstudio"  
package_install "texlive-most texlive-lang texlive-bin texstudio"
 
#office
cecho "Install - https://wiki.archlinux.org/index.php/LibreOffice"
package_install "libreoffice-fresh"
package_install "libreoffice-fresh-de"
package_install "hunspell hunspell-de"
package_install "aspell aspell-de"

#ocr analyse
cecho "Install ocrfeeder"   #require aspell
package_install "ocrfeeder tesseract gocr"

 
cecho "Install xmind - Mindmaps"   
aur_package_install "xmind"






print_line

cecho "Install system APPS" 

#cecho "Install cockpit - Systemd web monitor"  #for servers
#aur_package_install "cockpit storaged linux-user-chroot ostree"  

cecho "Install firewalld - Firewall gui"
package_install "firewalld"
systemctl enable firewalld


cecho "Install gparted - Partitionsmanager"
package_install "gparted"


cecho "Install grsync - Gui fÃ¼r Rsync"
package_install "grsync"



cecho "Install hosts-update - Host file updater"
aur_package_install "hosts-update"
hosts-update


cecho "Install htop - Systemmonitor"
package_install "htop"


cecho "Install virtualbox "
package_install "virtualbox virtualbox-host-dkms virtualbox-guest-iso linux-headers"
aur_package_install "virtualbox-ext-oracle"
add_user_to_group c0d3d3v vboxusers
modprobe vboxdrv vboxnetflt



cecho "Install netdata  - System informations"
package_install "netdata"
systemctl enable netdata.service


#alterrnative fÃ¼r yaourt 
cecho "Install pacaur  - https://wiki.archlinux.org/index.php/AUR_helpers"
run_as_user "gpg --recv-keys 1EB2638FF56C0C53"
aur_package_install "pacaur"



#Update erinnerung
cecho "Install aarchup  - https://wiki.archlinux.org/index.php/AUR_helpers"
aur_package_install "aarchup"


cecho "Install wireshark  - https://wiki.archlinux.org/index.php/wireshark"
package_install "wireshark-qt"
add_user_to_group c0d3d3v wireshark


cecho "Install grub-customizer  - https://wiki.archlinux.de/title/GRUB"
aur_package_install "grub-customizer"
#Theme: https://www.gnome-look.org/p/1111545/



#plex - https://wiki.archlinux.org/index.php/Plex ?? Media center









print_line

cecho "Install graphics APPS" 

cecho "Install gimp" 
package_install "gimp"

cecho "Install inkscape - Vektrografiken" 
package_install "inkscape python2-numpy python-lxml"


cecho "Install mypaint" 
package_install "mypaint" 

cecho "Install simple-scan" 
package_install "simple-scan"




print_line

cecho "Install browser" 



cecho "Install chromium" 
package_install "chromium"

cecho "Install firefox" 
package_install "firefox firefox-i18n-de"






print_line

cecho "Install DOWNLOAD tools" 

cecho "Install deluge - bittorrent client" 
package_install "deluge"

#cecho "Install rslsync - bittorrent sync" 
#aur_package_install "rslsync"



cecho "Install JDownlaoder2" 
aur_package_install "jdownloader2"








print_line

cecho "Install email tools" 


cecho "Install thunderbird" 
package_install "thunderbird"
package_install "thunderbird-i18n-de"

cecho "Install liferea" 
package_install "liferea"








print_line

cecho "Install im" 


cecho "Install konversation" 
package_install "konversation"


cecho "Install skype" 
package_install "skypeforlinux"


cecho "Install teamspeak3" 
package_install "teamspeak3"

cecho "Install gajim" 
package_install "gajim gajim-plugin-omemo"



cecho "Install qtox" 
aur_package_install "qtox-git"










print_line

cecho "Install Mapping Tools" 


cecho "Install google-earth" 
aur_package_install "google-earth"






print_line

cecho "Install RAT"  
#package_install "remmina"    #Remote desktop







print_line

cecho "Install Audio Tools" 


print_line
cecho "Install Audio player" 


cecho "Install spotify" 
aur_package_install "spotify"





print_line
cecho "Install Audio editor" 



cecho "Install audacity" 
package_install "audacity"



print_line
cecho "Install Audio Codecs"
 
package_install "gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav"

package_install "phonon-qt5-gstreamer"
# Use the 'standard' preset by default. This preset should generally be
# transparent to most people on most music and is already quite high in quality.
# The resulting bitrate should be in the 170-210kbps range, according to music
# complexity.
#run_as_user "gconftool-2 --type string --set /system/gstreamer/0.10/audio/profiles/mp3/pipeline '\audio/x-raw-int,rate=44100,channels=2 ! lame name=enc preset=1001 ! id3v2mux'"










print_line
cecho "Install VIDEO APPS" 


cecho "Install vlc"
package_install "vlc"
package_install "phonon-qt5-vlc"



print_line
cecho "Install Games" 


cecho "Install ddnet"
aur_package_install "ddnet"





 





print_line 




read -p "Finish up - Press enter to continue"

print_line
cecho "Set System Time"
timedatectl set-local-rtc true
 
systemctl enable systemd-timesyncd.service
systemctl start systemd-timesyncd.service



#setup global menu maybe 
#aur_package_install "gtk2-appmenu gtk3-appmenu" 
#aur_package_install "appmenu-qt appmenu-gtk"
#aur_package_install "kdeplasma-applets-menubar" 




cecho "CLEAN ORPHAN PACKAGES - https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks#Removing_unused_packages_.28orphans.29" 

pacman -Rns $(pacman -Qtdq)
pacman-optimize


 #load config from git




cecho "Finish :)" 
cecho "Please Reboot and enjoy" 
