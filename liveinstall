#!/bin/bash


if [[ -f `pwd`/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "missing file: sharedfuncs"
  exit 1
fi

pls_enter "What do you want to add to the begin of the new log?" 
cecho "$sthInsertion"

check_root
check_boot_system


print_line
ynAnswer="n"
yn_question "Do you want to change the keyboard layout to german (de-latin1)?"
if [ $ynAnswer == "y" ]; then
  print_info "Load German Keymap [https://wiki.archlinux.org/index.php/Keyboard_configuration_in_console]"
  ncecho "loadkeys de-latin1 "
  loadkeys de-latin1 >>"$LOG" 2>&1 & 
  pid=$!;progress $pid
fi

print_line
ynAnswer="n"
yn_question "Do you want to change the font to a big font (sun12x22)?"
if [ $ynAnswer == "y" ]; then
  print_info "Set Font to sun12x22"
  ncecho "setfont sun12x22 "
  setfont sun12x22 >>"$LOG" 2>&1 & 
  pid=$!;progress $pid
fi



check_connection

pause_function

print_title "This Skript will install Arch Linux"

pause_function

print_line

ncecho "package_install  pacman-contrib reflector"
package_install  "pacman-contrib reflector"

print_line 

ynAnswer="n"
yn_question "Do you want to create a new mirrorlist for pacman with ranked german servers?"
if [ $ynAnswer == "y" ]; then

  #Mirrorlist
  print_title "Backup pacman mirrorlist and filter for German Servers [https://wiki.archlinux.org/index.php/mirrors]"
  mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig
  ncecho "reflector --country France --country Germany --age 25 --protocol https --sort rate --verbose --save /etc/pacman.d/mirrorlist"
  reflector --country France --country Germany --age 12 --protocol https --sort rate --verbose --save /etc/pacman.d/mirrorlist  >>"$LOG" 2>&1 & 
  pid=$!;progress $pid

fi

cat /etc/pacman.d/mirrorlist | grep "^[^#]" | head -10 
ls /etc/pacman.d/ -la



read -p "Press enter to continue [be sure mirrorlist is not empty]"



print_line

print_title "Create Boot Device"
select_device


ynAnswer="n"
while [ $ynAnswer == "n" ];
do
    print_info "Please create two partitions. [https://wiki.archlinux.de/title/GPT]"
    cecho "First delete all partitions with: d"
    cecho "Create new partitions with: n"
    if [ $UEFI == 1 ]; then
	cecho "First partition: Partition number '1'; First sector '[enter]'; Last sector '+500M';"
	print_warning "type 'EF00'"
	
	cecho "Second partition:  Partition number '2'; First sector '[enter]'; Last sector '[enter]';"
	print_warning "type '8300'"
    else
	cecho "First partition: Partition number '1'; First sector '[enter]'; Last sector '+3M';"
	print_warning "type 'EF02'"
	
	cecho "Second partition:  Partition number '2'; First sector '[enter]'; Last sector '+500M';"
	print_warning "type '8300'"
	
	cecho "Third partition:  Partition number '3'; First sector '[enter]'; Last sector '[enter]';"
	print_warning "type '8300'"
    fi

    cecho "At the end, wirte the partitions: w"
    cecho "You can scroll up with 'Shift + PgUp' and scoll down with 'Shift + PgDown'"

    gdisk $BOOT_MOUNTPOINT

    lsblk
    yn_question "Have you realy created two partitions like in the given description?"
	
done


print_line

select_boot
select_luks



print_title "Setup Luks [https://wiki.archlinux.org/index.php/Dm-crypt]"
modprobe dm-crypt

print_warning "Confirm with upercase YES"



ynAnswer="n"
while [ $ynAnswer == "n" ];
do
    cryptsetup -c aes-xts-plain64 -y -s 512  --use-random luksFormat $LUKS_DISK
    yn_question "Have you realy confirmed with upercase YES and did you enter two times your passphrase?"
done

cecho "Open Luks Partition"



cecho "Don't use one of the following names:"
ls -la /dev/mapper/

pls_enter "How should the opend encrypted partition be named? [recomended: cryptroot; but dont use any name listed above]" 
lvmName=$sthInsertion



ynAnswer="n"
while [ $ynAnswer == "n" ];
do
    cryptsetup open --type luks $LUKS_DISK $lvmName
    yn_question "Did you open the encrypted partion?"
done
	
print_line



pls_enter "How should the root partition be named? [recomended: root]" 
rootName=$sthInsertion





print_line

print_title "Create Filesystem [https://wiki.archlinux.org/index.php/file_systems]"

ncecho "mkfs.ext4 -L ${rootName} /dev/mapper/${lvmName}"
mkfs.ext4 -L ${rootName} /dev/mapper/${lvmName}  >>"$LOG" 2>&1 &
pid=$!;progress $pid


pls_enter "How should the boot partition be named? [recomended: boot]" 
bootName=$sthInsertion

ncecho "mkfs.fat -F32 -n ${bootName} $BOOT_DISK "
mkfs.fat -F32 -n ${bootName} $BOOT_DISK  >>"$LOG" 2>&1 & 
pid=$!;progress $pid


print_line

print_info "Mount Filesystem [https://wiki.archlinux.de/title/Mounten]"

ncecho "mount /dev/mapper/${lvmName} /mnt "
mount /dev/mapper/${lvmName}  /mnt  >>"$LOG" 2>&1 & 
pid=$!;progress $pid


mkdir /mnt/boot

ncecho "mount $BOOT_DISK /mnt/boot "
mount $BOOT_DISK /mnt/boot  >>"$LOG" 2>&1 & 
pid=$!;progress $pid


print_line

read -p "Press enter to continue"

print_title "Install System [https://wiki.archlinux.org/index.php/Install_from_existing_Linux]"

yn_question "Do you want to add wifi support?"
if [ $ynAnswer == "y" ]; then
    ncecho "pacstrap /mnt base base-devel linux-firmware linux vim zsh efibootmgr intel-ucode zstd dhcpcd git netctl dialog wpa_supplicant"
    pacstrap /mnt base base-devel linux-firmware linux vim zsh efibootmgr intel-ucode zstd dhcpcd git netctl dialog wpa_supplicant >>"$LOG" 2>&1 & 
else
    ncecho "pacstrap /mnt base base-devel linux-firmware linux vim zsh efibootmgr intel-ucode zstd dhcpcd git"
    pacstrap /mnt base base-devel linux-firmware linux vim zsh efibootmgr intel-ucode zstd dhcpcd git >>"$LOG" 2>&1 & 
fi
pid=$!;progress $pid



print_info "Activate Swap [https://wiki.archlinux.org/index.php/Swap]"

free --giga

pls_enter "How big should the swap partition be? [recomended: 20GiB; it should be bigger than RAM]" 
swapSize=$sthInsertion

fallocate -l ${swapSize} /mnt/swapfile
chmod 600 /mnt/swapfile
mkswap /mnt/swapfile
swapon /mnt/swapfile


echo vm.swappiness=5 | tee -a /mnt/etc/sysctl.d/99-sysctl.conf
echo vm.vfs_cache_pressure=50 | tee -a /mnt/etc/sysctl.d/99-sysctl.conf





print_line

print_info "Generate Fstab [https://wiki.archlinux.org/index.php/fstab]"


ncecho "genfstab -U /mnt >> /mnt/etc/fstab "
genfstab -pU /mnt >> /mnt/etc/fstab & 
pid=$!;progress $pid

#fix small /tmp 	
yn_question "Do you want to create a ramdisk for /tmp?"
if [ $ynAnswer == "y" ]; then
    add_line "none /tmp tmpfs defaults,noatime,mode=1777 0 0" "/mnt/etc/fstab"
fi



print_info "Edit makepkg conf [https://wiki.archlinux.org/index.php/makepkg#tmpfs]"

sed -i "s|#BUILDDIR=/tmp/makepkg|BUILDDIR=/tmp/makepkg|" /mnt/etc/makepkg.conf
sed -i "s|PKGEXT='.pkg.tar.xz'|PKGEXT='.pkg.tar.zst'|" /mnt/etc/makepkg.conf
sed -i "s|COMPRESSZST=(zstd -c -z -q -)|COMPRESSZST=(zstd -c -q -T0 -18 -)|" /mnt/etc/makepkg.conf


echo "MAKEFLAGS='-j$(nproc)'" >> /mnt/etc/makepkg.conf


print_info "Generate vconsole [https://wiki.archlinux.org/index.php/Keyboard_configuration_in_console]"

echo "KEYMAP=de-latin1" > /mnt/etc/vconsole.conf
echo "FONT=sun12x22" >> /mnt/etc/vconsole.conf

cecho "Generate loacls [https://wiki.archlinux.org/index.php/locale]"

echo "LANG=de_DE.UTF-8" > /mnt/etc/locale.conf
echo "LC_ALL=" >> /mnt/etc/locale.conf


print_info "Generate Hostname [https://wiki.archlinux.org/index.php/Network_configuration#Set_the_hostname]"


DEVICENAMEENTERED=0
while [ $DEVICENAMEENTERED -eq 0 ];
do
    
    read -p "Please enter a hostname for the system: " devicename
    yn_question "Do you realy want to use ${devicename}?"
    if [ $ynAnswer == "y" ]; then
	DEVICENAMEENTERED=1
    fi
done
echo $devicename > /mnt/etc/hostname

print_info "Generate Journalctrl config [https://wiki.archlinux.org/index.php/Systemd#Journal]"


sed -i "s/#Storage=auto/Storage=persistent/" /mnt/etc/systemd/journald.conf
sed -i "s/#SystemMaxUse=/SystemMaxUse=1G/" /mnt/etc/systemd/journald.conf



print_info "Generate Timezone [https://wiki.archlinux.org/index.php/Time#Time_zone]"

arch_chroot "ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime"

print_info "Setup Hardware Clock - Hardware is set to utc [https://wiki.archlinux.org/index.php/Time]"

arch_chroot "hwclock --systohc --utc"



print_info "Deaktivate Beep"
echo "blacklist pcspkr" > /mnt/etc/modprobe.d/nobeep.conf


print_line

print_info "Setup Locals [https://wiki.archlinux.org/index.php/Locale]"

sed -i "s/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/" /mnt/etc/locale.gen

arch_chroot "locale-gen"


print_line

print_info "Activate Multilib  [https://wiki.archlinux.org/index.php/multilib]"
#SigLevel = PackageRequired TrustedOnly


sed -i "/\[multilib\]/,/Include/"'s/^#//' /mnt/etc/pacman.conf
sed -i 's/#Color/Color/' /mnt/etc/pacman.conf


print_info "Copy Mirrorlist"

#Mirrorlist
cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
cp /etc/pacman.d/mirrorlist.orig /mnt/etc/pacman.d/mirrorlist.orig


arch_chroot "pacman -Sy"


print_line

print_info "Change Linux Kernel Modules  [https://wiki.archlinux.org/index.php/mkinitcpio]"


sed -i 's/^HOOKS=(.*)/HOOKS=(base udev keyboard keymap autodetect consolefont modconf block encrypt filesystems resume fsck)/' /mnt/etc/mkinitcpio.conf
sed -i 's/MODULES=()/MODULES=(ext4)/' /mnt/etc/mkinitcpio.conf

arch_chroot "mkinitcpio -P"


print_line

print_info "Set Root Password  [https://wiki.archlinux.org/index.php/users_and_groups]"
ynAnswer="n"
while [ $ynAnswer == "n" ];
do
    arch_chroot "passwd"
    yn_question "Did you set the password correct?"
done

print_info "Create Admin User [https://wiki.archlinux.de/title/Sudo#sudo_f.C3.BCr_Benutzer_einrichten]"

pls_enter "How should the administrator be named? [recomended: yourName]" 
adminName=$sthInsertion

arch_chroot "useradd -m -g users -G wheel,storage,power,network,uucp -s /bin/zsh ${adminName}"

ynAnswer="n"
while [ $ynAnswer == "n" ];
do
    arch_chroot "passwd ${adminName}"
    yn_question "Did you set the password correct?"
done

sed -i 's/# %wheel   ALL=(ALL) ALL/%wheel   ALL=(ALL) ALL/' /mnt/etc/sudoers



print_line

if [ $UEFI == 1 ]; then
  
  print_info "Install EFI Boot-Manager  [https://wiki.archlinux.org/index.php/Systemd-boot#Installing_the_EFI_boot_manager]"

  ncecho "Installing EFI Boot-Manager "

  arch_chroot "bootctl --path=/boot install"

else


  print_info "Install Grub  [https://wiki.archlinux.org/index.php/GRUB]"

  ncecho "Installing Grub "

  pacstrap /mnt grub os-prober  >>"$LOG" 2>&1 &
fi

pid=$!;progress $pid


#get uuid of luks_disk
luksUUDI=$(blkid -s UUID  -o value ${LUKS_DISK})

swap_file_offset=$(filefrag -v /mnt/swapfile | awk '{ if($1=="0:"){print $4} }')


if [ $UEFI == 1 ]; then
  echo default arch > /mnt/boot/loader/loader.conf

else
  sed -i -e "s|GRUB_CMDLINE_LINUX=\"\(.\+\)\"|GRUB_CMDLINE_LINUX=\"cryptdevice=UUID=${luksUUDI}:${lvmName} root=/dev/mapper/${lvmName} resume=/dev/mapper/${lvmName} resume_offset=${swap_file_offset}\"|g" -e "s|GRUB_CMDLINE_LINUX=\"\"|GRUB_CMDLINE_LINUX=\"cryptdevice=UUID=${luksUUDI}:${lvmName} root=/dev/mapper/${lvmName} resume=/dev/mapper/${lvmName} resume_offset=${swap_file_offset}\"|g" /mnt/etc/default/grub

  sed -i 's/#GRUB_ENABLE_CRYPTODISK=y/GRUB_ENABLE_CRYPTODISK=y/' /mnt/etc/default/grub

fi


if [ $UEFI == 1 ]; then
    echo "title Arch Linux" > /mnt/boot/loader/entries/arch.conf
    echo "linux /vmlinuz-linux" >> /mnt/boot/loader/entries/arch.conf
    echo "initrd /intel-ucode.img" >> /mnt/boot/loader/entries/arch.conf
    echo "initrd /initramfs-linux.img" >> /mnt/boot/loader/entries/arch.conf
    echo "options cryptdevice=UUID=${luksUUDI}:${lvmName} root=/dev/mapper/${lvmName} resume=/dev/mapper/${lvmName} resume_offset=${swap_file_offset} quiet rw" >> /mnt/boot/loader/entries/arch.conf

else
    arch_chroot "grub-install $BOOT_MOUNTPOINT" 

    arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg" 
fi


print_line

print_line

cecho "\n\n"

cecho "Installation finished" 
cecho "Please execute following comands:"
cecho "swapoff -a"
cecho "umount -R /mnt"
cecho "\n\n" 
cecho "reboot"
