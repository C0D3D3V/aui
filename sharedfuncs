#!/bin/bash



AUI_DIR=`pwd` #CURRENT DIRECTORY 
LOG="${AUI_DIR}/`basename ${0}`.log" # LOG FILE
username=""

#[[ -f $LOG ]] && rm -f "$LOG"

cecho() { 
    echo -e "$1"
    echo -e "$1" >>"$LOG"
    tput sgr0;
} 

error_msg() {
    local _msg="${1}"
    echo -e "${_msg}"
    echo -e "$(date): ${_msg}" >>"$LOG"
    exit 1
} 

check_root() {
    if [[ "$(id -u)" != "0" ]]; then
	error_msg "ERROR! You must execute the script as the root user."
    fi
} 


print_line() {
    printf "\n%$(tput cols)s\n\n"|tr ' ' '-'
}

arch_chroot() {
    arch-chroot /mnt /bin/bash -c "${1}"
}


add_line() {
    local _add_line=${1}
    local _filepath=${2}


    local _has_line=`grep -ci "${_add_line}" ${_filepath} 2>&1`
    [[ $_has_line -eq 0 ]] && echo "${_add_line}" >> ${_filepath}
} 


aui_download_packages() {
    for PKG in $1; do
	#exec command as user instead of root
	su - $username -c "
        [[ ! -d aui_packages ]] && mkdir aui_packages
        cd aui_packages
        curl -o ${PKG}.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/${PKG}.tar.gz
        tar zxvf ${PKG}.tar.gz
        rm ${PKG}.tar.gz
        cd ${PKG}
        makepkg -csi --noconfirm
      "
    done
} 

is_package_installed() { 
    #check if a package is already installed
    for PKG in $1; do
	pacman -Q $PKG &> /dev/null && return 0;
    done
    return 1
}

run_as_user() {
    sudo -H -u $username ${1}

}

read_input_text() {
    #    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
    #      OPTION=$2
    #    else
    read -p "$1 [y/N]: " OPTION
    echo ""
    #    fi
    OPTION=`echo "$OPTION" | tr '[:upper:]' '[:lower:]'`
} 

replace_line(){
    local _search=${1}
    local _replace=${2}
    local _filepath=${3}
    local _filebase=`basename ${3}`

    sed -e "s/${_search}/${_replace}/" ${_filepath} > /tmp/${_filebase} 2>"$LOG"
    if [[ ${?} -eq 0 ]]; then
	mv /tmp/${_filebase} ${_filepath}
    else
	cecho "failed: ${_search} - ${_filepath}"
    fi
}




aur_package_install() {
    su - $username -c "sudo -v"
    #install package from aur
    for PKG in $1; do
	if ! is_package_installed "${PKG}" ; then
            su - $username -c "yaourt --noconfirm -S ${PKG}"
	else 
            echo -e "Warning: ${PKG} is up to date --skipping" 
	fi
    done
}  

package_install() { 
    #install packages using pacman
    for PKG in $1; do
	if ! is_package_installed "${PKG}" ; then
	    pacman -S --noconfirm --needed ${PKG}
	else 
	    echo -e "Warning: ${PKG} is up to date --skipping" 
	fi
    done  
} 

config_xinitrc() { 
    #create a xinitrc file in home user directory
    cp -fv /etc/X11/xinit/xinitrc /home/$username/.xinitrc
    echo -e "exec $1" >> /home/$username/.xinitrc
    chown -R $username:users /home/$username/.xinitrc
} 

add_user_to_group() { 
    local _user=${1}
    local _group=${2}

    if [[ -z ${_group} ]]; then
	error_msg "ERROR! 'add_user_to_group' was not given enough parameters."
    fi
    
    groupadd ${_group}
    gpasswd -a ${_user} ${_group}  
} 
