#!/bin/bash



AUI_DIR=`pwd` #CURRENT DIRECTORY 
LOG="${AUI_DIR}/`basename ${0}`.log" # LOG FILE
PKG_FAIL="${AUI_DIR}/`basename ${0}`_fail_install.log"


username=""

#[[ -f $LOG ]] && rm -f "$LOG"


# COLORS {{{
Bold=$(tput bold)
Underline=$(tput sgr 0 1)
Reset=$(tput sgr0)

# Regular Colors
Red=$(tput setaf 1)
Green=$(tput setaf 2)
Yellow=$(tput setaf 3)
Blue=$(tput setaf 4)
Purple=$(tput setaf 5)
Cyan=$(tput setaf 6)
White=$(tput setaf 7)

# Bold
BRed=${Bold}${Red}
BGreen=${Bold}${Green}
BYellow=${Bold}${Yellow}
BBlue=${Bold}${Blue}
BPurple=${Bold}${Purple}
BCyan=${Bold}${Cyan}
BWhite=${Bold}${White}

SPIN="/-\|" #SPINNER POSITION
AUR=`echo -e "(${BPurple}aur${Reset})"`

cecho() { 
    echo -e "$1"
    echo -e "$(date): $1" >>"$LOG"
    tput sgr0;  #reset color
}

cecho "Logfile created at: $LOG"
echo -e "\n\n\n\n\n\n\n\nNew Logfile\n\n" >>"$LOG"

error_msg() {
    local _msg="${1}"
    echo -e "${_msg}"
    echo -e "$(date): ${_msg}" >>"$LOG"
    exit 1
} 


check_root() {
    if [[ "$(id -u)" != "0" ]]; then
	error_msg "ERROR! You must execute the script as the root user."
    fi
} 


print_line() {
    printf "\n%$(tput cols)s\n\n"|tr ' ' '-'
}

print_title() { 
    clear
    print_line
    echo -e "# ${Bold}$1${Reset}"
    echo -e "$(date): $1" >>"$LOG"
    print_line
    echo ""
}
print_info() { 
    #Console width number
    T_COLS=`tput cols`
    echo -e "${Bold}$1${Reset}\n" | fold -sw $(( $T_COLS - 18 )) | sed 's/^/\t/'
    echo -e "$(date): $1" >>"$LOG"
}

print_warning() { 
    T_COLS=`tput cols`
    echo -e "${BYellow}$1${Reset}\n" | fold -sw $(( $T_COLS - 1 ))
    echo -e "$(date): $1" >>"$LOG"
}

print_danger() { 
    T_COLS=`tput cols`
    echo -e "${BRed}$1${Reset}\n" | fold -sw $(( $T_COLS - 1 ))
    echo -e "$(date): $1" >>"$LOG"
} 

  
arch_chroot() {
    arch-chroot /mnt /bin/bash -c "${1}"
}


add_line() {
    local _add_line=${1}
    local _filepath=${2}


    local _has_line=`grep -ci "${_add_line}" ${_filepath} 2>&1`
    [[ $_has_line -eq 0 ]] && echo "${_add_line}" >> ${_filepath}
} 


aui_download_packages() {
    for PKG in $1; do
	#exec command as user instead of root
	su - $username -c "
        [[ ! -d aui_packages ]] && mkdir aui_packages
        cd aui_packages
        curl -o ${PKG}.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/${PKG}.tar.gz
        tar zxvf ${PKG}.tar.gz
        rm ${PKG}.tar.gz
        cd ${PKG}
        makepkg -csi --noconfirm
      "
    done
} 

is_package_installed() { 
    #check if a package is already installed
    for PKG in $1; do
	pacman -Q $PKG &> /dev/null && return 0;
    done
    return 1
}

checkbox() {
    #display [X] or [ ]
    [[ "$1" -eq 1 ]] && echo -e "${BBlue}[${Reset}${Bold}X${BBlue}]${Reset}" || echo -e "${BBlue}[ ${BBlue}]${Reset}";
}

checkbox_package() {
    #check if [X] or [ ]
    is_package_installed "$1" && checkbox 1 || checkbox 0
}

run_as_user() {
    sudo -H -u $username ${1}

}

read_input_text() {
    #    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
    #      OPTION=$2
    #    else
    read -p "$1 [y/N]: " OPTION
    echo ""
    #    fi
    OPTION=`echo "$OPTION" | tr '[:upper:]' '[:lower:]'`
} 

replace_line(){
    local _search=${1}
    local _replace=${2}
    local _filepath=${3}
    local _filebase=`basename ${3}`

    sed -e "s/${_search}/${_replace}/" ${_filepath} > /tmp/${_filebase} 2>"$LOG"
    if [[ ${?} -eq 0 ]]; then
	mv /tmp/${_filebase} ${_filepath}
    else
	cecho "failed: ${_search} - ${_filepath}"
    fi
}




aur_package_install() {
    su - $username -c "sudo -v"
    #install package from aur
    for PKG in $1; do
	if ! is_package_installed "${PKG}" ; then
	    ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} Installing ${AUR} ${Bold}${PKG}${Reset} "
            su - $username -c "yaourt --noconfirm -Sy ${PKG}" >>"$LOG" 2>&1 &
	    pid=$!;progress $pid
	else 
            print_info "${PKG} is up to date --skipping" 
	fi
    done
}  

package_install() { 
    #install packages using pacman
    for PKG in $1; do
	if ! is_package_installed "${PKG}" ; then
	    local _pkg_repo=`pacman -Sp --print-format %r ${PKG} | uniq | sed '1!d'`
            case $_pkg_repo in
		"core")
		    _pkg_repo="${BRed}${_pkg_repo}${Reset}"
		    ;;
		"extra")
		    _pkg_repo="${BYellow}${_pkg_repo}${Reset}"
		    ;;
		"community")
		    _pkg_repo="${BGreen}${_pkg_repo}${Reset}"
		    ;;
		"multilib")
		    _pkg_repo="${BCyan}${_pkg_repo}${Reset}"
		    ;;
	    esac
	    ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} Installing (${_pkg_repo}) ${Bold}${PKG}${Reset} "
	    pacman -Sy --noconfirm --needed ${PKG} >>"$LOG" 2>&1 &
	    pid=$!;progress $pid
	else 
	    print_info "${PKG} is up to date --skipping" 
	fi
    done  
}

system_update() {
    #should add backgroundjob
    pacman -Sy
}

system_ctl() {
    local _action=${1}
    local _object=${2}
    ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} systemctl ${_action} ${_object} "
    systemctl ${_action} ${_object} >> "$LOG" 2>&1
    pid=$!;progress $pid
}

package_remove() { 
    #remove package
    for PKG in ${1}; do
	if is_package_installed "${PKG}" ; then
            ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} Removing ${Bold}${PKG}${Reset} "
            pacman -Rcsn --noconfirm ${PKG} >>"$LOG" 2>&1 &
            pid=$!;progress $pid
	fi
    done
}


config_xinitrc() { 
    #create a xinitrc file in home user directory
    cp -fv /etc/X11/xinit/xinitrc /home/$username/.xinitrc
    echo -e "exec $1" >> /home/$username/.xinitrc
    chown -R $username:users /home/$username/.xinitrc
} 

add_user_to_group() { 
    local _user=${1}
    local _group=${2}

    if [[ -z ${_group} ]]; then
	#danger fill exit
	error_msg "ERROR! 'add_user_to_group' was not given enough parameters."
    fi


    if [ ! $(getent group ${_group}) ]; then
	
	ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} Creating group: ${Bold}${_group}${Reset} "
	groupadd ${_group} >>"$LOG" 2>&1 &
	pid=$!;progress $pid
    fi
    
    ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} Adding ${Bold}${_user}${Reset} to ${Bold}${_group}${Reset} "
    gpasswd -a ${_user} ${_group} >>"$LOG" 2>&1 & 
    pid=$!;progress $pid
} 


#no new line
ncecho() {
    echo -ne "$1"
    echo -ne "$1" >>"$LOG"
    tput sgr0  #reset color
}


spinny() {
    echo -ne "\b${SPIN:i++%${#SPIN}:1}"
}


progress() {
    ncecho "  ";
    start=$(date +%s.%N)
    while true; do
      kill -0 $pid &> /dev/null;  
      if [[ $? == 0 ]]; then   #Prozess still running?
        spinny
        sleep 0.25
      else
	end=$(date +%s.%N)
        runtime=$( echo "$end - $start" | bc -l )
	
        #ncecho "\b\b  \n";
        wait $pid
        retcode=$?
        ncecho " $pid returend after ${runtime}s $retcode -> "
        if [[ $retcode == 0 ]] || [[ $retcode == 255 ]]; then
          ncecho "${BGreen}success${Reset}\n\n"
        else
          ncecho "${BRed}failed${Reset}\n"
          echo -e "$PKG" >> $PKG_FAIL
	  echo -e "\n\nLast 15 log lines:"
          tail -n 15 $LOG
	  echo -e "\n"
        fi
        break
      fi
    done
}

invalid_option() { 
    print_line
    cecho "Invalid option. Try another one."
    pause_function
}

pause_function() {
    print_line
    #read -e -sn 1 -p "Press enter to continue..."
    read -p "Press enter to continue..."
}

# PROMPT 
prompt1="Enter your option: "
prompt2="Enter nÂ° of options (ex: 1 2 3 or 1-3): "
prompt3="You have to manually enter the following commands, then press ${BYellow}ctrl+d${Reset} or type ${BYellow}exit${Reset}:"


XPINGS=0 # CONNECTION CHECK
    
check_connection(){
    XPINGS=$(( $XPINGS + 1 ))
    connection_test() {
	ping -q -w 1 -c 1 `ip r | grep default | awk 'NR==1 {print $3}'` &> /dev/null && return 1 || return 0
    }
    WIRED_DEV=`ip link | grep "ens\|eno\|enp" | awk '{print $2}'| sed 's/://' | sed '1!d'`
    cecho "Detected wired device: $WIRED_DEV"
    WIRELESS_DEV=`ip link | grep wlp | awk '{print $2}'| sed 's/://' | sed '1!d'`
    cecho "Detected wireless device: $WIRELESS_DEV"
    
    if connection_test; then
	print_warning "ERROR! Connection not Found."
	print_info "Network Setup"
	local _connection_opts=("Wired Automatic" "Wired Manual" "Wireless" "Configure Proxy" "Skip")
	PS3="$prompt1"  #message for select
	
	select CONNECTION_TYPE in "${_connection_opts[@]}"; do
            case "$REPLY" in
		1)
		    systemctl start dhcpcd@${WIRED_DEV}.service
		    break
		    ;;
		2)
		    systemctl stop dhcpcd@${WIRED_DEV}.service
		    read -p "IP Address: " IP_ADDR
		    read -p "Submask: " SUBMASK
		    read -p "Gateway: " GATEWAY
		    ip link set ${WIRED_DEV} up
		    ip addr add ${IP_ADDR}/${SUBMASK} dev ${WIRED_DEV}
		    ip route add default via ${GATEWAY}
		    nano /etc/resolv.conf
		    break
		    ;;
		3)
		    wifi-menu ${WIRELESS_DEV}
		    break
		    ;;
		4)
		    read -p "Enter your proxy e.g. protocol://adress:port: " OPTION
		    export http_proxy=$OPTION
		    export https_proxy=$OPTION
		    export ftp_proxy=$OPTION
		    echo "proxy = $OPTION" > ~/.curlrc
		    break
		    ;;
		5)
		    break
		    ;;
		*)
		    invalid_option
		    ;;
            esac
	done
	if [[ $XPINGS -gt 2 ]]; then
            print_danger "Can't establish connection. exiting..."
	    
	    ping -c 2 google.com

	    cecho "Connect to wifi [https://wiki.archlinux.org/index.php/netctl]"
	    cecho "Be sure to connect to Wifi with: wifi-menu"

	    cecho "Or Connect to ethernet [https://bbs.archlinux.org/viewtopic.php?id=210679]"
	    cecho "Be sure to connect to Ethernet with: "
	    cecho "ip link set enpxxxx up  "
	    cecho "dhcpcd" 
            exit 1
	fi
	[[ $REPLY -ne 5 ]] && check_connection
    else
	cecho "Connection found!"
        ping -c 2 google.com
    fi
    ping -c 10 google.com
}



read_input_options() {
    local line
    local packages
    #if [[ $AUTOMATIC_MODE -eq 1 ]]; then
    #array=("$1")
    #else
    read -p "$prompt2" OPTION
    array=("$OPTION")
    #fi
    for line in ${array[@]/,/ }; do
	if [[ ${line/-/} != $line ]]; then
            for ((i=${line%-*}; i<=${line#*-}; i++)); do
		packages+=($i);
            done
	else
            packages+=($line)
	fi
    done
    OPTIONS=("${packages[@]}")
}

yn_question() {
    while true
    do
	read -p "$1 [y/N]: " ynAnswer
	#ynAnswer=`echo "$ynAnswer" | tr '[:upper:]' '[:lower:]'`

	case $ynAnswer in
	    [yY]* ) ynAnswer="y"
		    break
		    ;;

	    [nN]* ) ynAnswer="n"
		    break
		    ;;

	    * )     echo "Dude, just enter Y or N, please.";
		    ;;
	esac
    done
}


pls_enter(){
    
    sthEntered=0
    while [ $sthEntered -eq 0 ];
    do
	read -p "$1 : " sthInsertion
	yn_question "Is your insertion '${sthInsertion}' correct?"
	if [ $ynAnswer == "y" ]; then
	    sthEntered=1
	fi
    done

}



include_file() {
    if [[ -f `pwd`/$1 ]]; then
	source $1
    else
	echo "missing file: $1"
	exit 1
    fi
}



contains_element() {
    #check if an element exist in a string
    for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
} 

select_device(){
  devices_list=(`lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd\|nvme\|mmcblk'`);
  PS3="$prompt1"
  echo -e "Attached Devices:\n"
  lsblk -lnp -I 2,3,8,9,22,34,56,57,58,65,66,67,68,69,70,71,72,91,128,129,130,131,132,133,134,135,259 | awk '{print $1,$4,$6,$7}'| column -t
  echo -e "\n"
  echo -e "Select device to partition:\n"
  select device in "${devices_list[@]}"; do
    if contains_element "${device}" "${devices_list[@]}"; then
      break
    else
      invalid_option
    fi
  done
  BOOT_MOUNTPOINT=$device
  cecho "You selected $BOOT_MOUNTPOINT"
}


select_luks(){
    
    #print_danger "\tDo not use this for boot partitions"
    block_list=(`lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'`)
    PS3="$prompt1"
	
	if [ $UEFI == 1 ]; then
		echo -e "Please select the root Partition (the second partition that you created, normaly /dev/sda2): "
	else
		echo -e "Please select the root Partition (the third partition that you created, normaly /dev/sda3): "
	fi
    select OPT in "${block_list[@]}"; do
	if contains_element "$OPT" "${block_list[@]}"; then
	    
	    LUKS_DISK=${OPT}
	    #`echo ${OPT} | sed 's/\/dev\///'`
	    break
	else
	    invalid_option
	fi
    done
    cecho "You selected $LUKS_DISK"
}


select_boot(){
    block_list=(`lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'`)
    PS3="$prompt1"
	
	if [ $UEFI == 1 ]; then
		echo -e "Please select the boot Partition (the first partition that you created, normaly /dev/sda1): "
	else
		echo -e "Please select the boot Partition (the second partition that you created, normaly /dev/sda2): "
	fi
	
	
    select OPT in "${block_list[@]}"; do
	if contains_element "$OPT" "${block_list[@]}"; then
	    
	    BOOT_DISK=${OPT}
	    #`echo ${OPT} | sed 's/\/dev\///'`
	    break
	else
	    invalid_option
	fi
    done
    cecho "You selected $BOOT_DISK"
}



check_boot_system() {
    if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Inc.' ]] || [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Computer, Inc.' ]]; then
      modprobe -r -q efivars || true  # if MAC
    else
      modprobe -q efivarfs            # all others
    fi
    if [[ -d "/sys/firmware/efi/" ]]; then
      ## Mount efivarfs if it is not already mounted
      if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
      fi
      UEFI=1
      cecho "UEFI Mode detected"
    else
      UEFI=0
      cecho "BIOS Mode detected"
    fi
}


